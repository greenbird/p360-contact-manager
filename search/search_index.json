{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"P360 Contact Manager \u00b6 While there are built in methods to syncronize against for example br\u00f8nn\u00f8ysundregisteret, to enrich data or update data they are slow and point and click oriented. There are also cases where duplicates are created by external programs. This program tries to fix some of those issues. Quickstart \u00b6 Get the package pip install p360-contact-manager Have your authkey and base url's at ready Run program: Test connection python p360-contact-manager --authkey the_key --p360_base_url url test Find duplicates python p360-contact-manager --authkey the_key --p360_base_url url duplicates Check the file thats created if everything looks okay Run update python p360-contact-manager --authkey the_key --p360_base_url url --worklist duplicates_worklist.json update","title":"Home"},{"location":"#p360-contact-manager","text":"While there are built in methods to syncronize against for example br\u00f8nn\u00f8ysundregisteret, to enrich data or update data they are slow and point and click oriented. There are also cases where duplicates are created by external programs. This program tries to fix some of those issues.","title":"P360 Contact Manager"},{"location":"#quickstart","text":"Get the package pip install p360-contact-manager Have your authkey and base url's at ready Run program: Test connection python p360-contact-manager --authkey the_key --p360_base_url url test Find duplicates python p360-contact-manager --authkey the_key --p360_base_url url duplicates Check the file thats created if everything looks okay Run update python p360-contact-manager --authkey the_key --p360_base_url url --worklist duplicates_worklist.json update","title":"Quickstart"},{"location":"argument_list/","text":"Authkey \u00b6 cli short cli long settings.json env variable -ak --authkey authkey P360_AUTHKEY The authkey is used to authenticate against the P360 api. We use the value as is. P360 Base Url \u00b6 cli short cli long settings.json env variable -pbu --p360_base_url p360_base_url P360_P360_BASE_URL Base Url to the P60 api. Should end in / Br\u00f8nn\u00f8ysund Register Base Url \u00b6 cli short cli long settings.json env variable -bu --brreg_base_url brreg_base_url P360_BRREG_BASE_URL Base Url to the brreg api. Should end in / Worklist \u00b6 cli short cli long settings.json env variable -w --worklist worklist P360_WORKLIST Worklist argument is used to provide what worklist file should be taken as input Output \u00b6 cli short cli long settings.json env variable -o --output output P360_OUTPUT Output argument is used to tell the program where and what to call the resulting file Error Margin \u00b6 cli short cli long settings.json env variable -em --error_margin error_margin P360_ERROR_MARGIN Default: 50 Lets you decide after how many timeouts or errors during processing the program should give up and exit. Dry \u00b6 cli short cli long settings.json env variable -d --dry dry P360_DRY Default: False Dry lets you decide if you want to do a test run that intercepts all calls to p360 update and synchronize and thus does not actually update anything. It lets you for example see if the worklist file is okay. Brreg Search Criteria \u00b6 cli short cli long settings.json env variable N/A N/A brreg_search_criteria N/A Brreg search criteria is used when we search for organizations in brreg.no with the action brreg_synchronize . The result of this search is used to build a synchronize worklist that can then be used to update/create entries in p360. The criterias should be as limiting as possible to prevent huge amounts of enterprises being fetched. The brreg API has a max amount of results at 10 000 so try to make the criterias quite limiting. All the available parameteres can be found here: brreg api P360 Search Criteria \u00b6 cli short cli long settings.json env variable N/A N/A p360_search_criteria N/A P360 search criteria is to have some sort of way to limit the result of enterprises we should do work on. For example when finding duplicates we should only ever check enterprises that are Active=True Check your p360 api for what parameters you can use Duplicate remove payload \u00b6 cli short cli long settings.json env variable N/A N/A duplicate_remove_payload N/A This payload is used when we update enterprises in p360 that are flagged as duplicates. It should look something like this. \"duplicate_remove_payload\" : { \"Recno\" : null , \"Active\" : false , \"EnterpriseNumber\" : \"\" } Here you can choose what to do with the Recno and Enterprise number and actually any other parameter than the /UpdateEnterprise endpoint can handle. This means that you can set for example name to Disabled by duplicatecheck or anything you want.","title":"List of Arguments"},{"location":"argument_list/#authkey","text":"cli short cli long settings.json env variable -ak --authkey authkey P360_AUTHKEY The authkey is used to authenticate against the P360 api. We use the value as is.","title":"Authkey"},{"location":"argument_list/#p360-base-url","text":"cli short cli long settings.json env variable -pbu --p360_base_url p360_base_url P360_P360_BASE_URL Base Url to the P60 api. Should end in /","title":"P360 Base Url"},{"location":"argument_list/#brnnysund-register-base-url","text":"cli short cli long settings.json env variable -bu --brreg_base_url brreg_base_url P360_BRREG_BASE_URL Base Url to the brreg api. Should end in /","title":"Br\u00f8nn\u00f8ysund Register Base Url"},{"location":"argument_list/#worklist","text":"cli short cli long settings.json env variable -w --worklist worklist P360_WORKLIST Worklist argument is used to provide what worklist file should be taken as input","title":"Worklist"},{"location":"argument_list/#output","text":"cli short cli long settings.json env variable -o --output output P360_OUTPUT Output argument is used to tell the program where and what to call the resulting file","title":"Output"},{"location":"argument_list/#error-margin","text":"cli short cli long settings.json env variable -em --error_margin error_margin P360_ERROR_MARGIN Default: 50 Lets you decide after how many timeouts or errors during processing the program should give up and exit.","title":"Error Margin"},{"location":"argument_list/#dry","text":"cli short cli long settings.json env variable -d --dry dry P360_DRY Default: False Dry lets you decide if you want to do a test run that intercepts all calls to p360 update and synchronize and thus does not actually update anything. It lets you for example see if the worklist file is okay.","title":"Dry"},{"location":"argument_list/#brreg-search-criteria","text":"cli short cli long settings.json env variable N/A N/A brreg_search_criteria N/A Brreg search criteria is used when we search for organizations in brreg.no with the action brreg_synchronize . The result of this search is used to build a synchronize worklist that can then be used to update/create entries in p360. The criterias should be as limiting as possible to prevent huge amounts of enterprises being fetched. The brreg API has a max amount of results at 10 000 so try to make the criterias quite limiting. All the available parameteres can be found here: brreg api","title":"Brreg Search Criteria"},{"location":"argument_list/#p360-search-criteria","text":"cli short cli long settings.json env variable N/A N/A p360_search_criteria N/A P360 search criteria is to have some sort of way to limit the result of enterprises we should do work on. For example when finding duplicates we should only ever check enterprises that are Active=True Check your p360 api for what parameters you can use","title":"P360 Search Criteria"},{"location":"argument_list/#duplicate-remove-payload","text":"cli short cli long settings.json env variable N/A N/A duplicate_remove_payload N/A This payload is used when we update enterprises in p360 that are flagged as duplicates. It should look something like this. \"duplicate_remove_payload\" : { \"Recno\" : null , \"Active\" : false , \"EnterpriseNumber\" : \"\" } Here you can choose what to do with the Recno and Enterprise number and actually any other parameter than the /UpdateEnterprise endpoint can handle. This means that you can set for example name to Disabled by duplicatecheck or anything you want.","title":"Duplicate remove payload"},{"location":"configuring/","text":"Configuring this program can be done 3 places: settings.json environment variables commandline arguments Where commandline arguments overwrites environment variables which overwrites arguments set in settings. The required arguments for each action are different, but mostly it boils down to --authkey , --output , --worklist and two url arguments p360_base_url and brreg_base_url Note The authkey is here so that we can authenticate against the p360 API. Without this we cannot fetch data nor update data. Settings.json file \u00b6 The settings.json file can actually store all arguments that are available in this program. However, I would advice against storing action and possibly --authkey in settings.json . action because action usually need to be different each time since we are doing everything in two steps. --authkey because we don't encrypt it, but you can if you want to. A basic settings.json file looks something like this { \"authkey\" : \"some authkey\" , \"p360_base_url\" : \"somep360url.com/api/\" , \"brreg_base_url\" : \"https://data.brreg.no/enhetsregisteret/api/\" , \"cached\" : false , \"dry\" : false , \"error_margin\" : 50 , \"brreg_search_criteria\" : { \"organisasjonsform\" : [ \"AS\" , \"ASA\" , \"ENK\" ], \"konkurs\" : false , \"fraAntallAnsatte\" : 1 , \"registrertIMvaregisteret\" : true , \"registrertIForetaksregisteret\" : true , \"naeringskode\" : \"A,C,D,E\" , \"size\" : 100 }, \"p360_search_criteria\" : { \"parameter\" : { \"Active\" : true , \"Page\" : 0 , \"MaxRows\" : 20 , \"SortCriterion\" : \"RecnoDescending\" , \"IncludeCustomFields\" : false } }, \"duplicate_remove_payload\" : { \"Recno\" : null , \"Active\" : false , \"EnterpriseNumber\" : \"\" } } Environment Variables \u00b6 It might be usefull to set arguments with environment variables instead. You can do this by prepending the argument with P360_ and capitalize the argument. ie: error_margin -> P360_ERROR_MARGIN brreg_base_url -> P360_BRREG_BASE_URL p360_base_url -> P360_P360_BASE_URL Commandline Arguments \u00b6 All commands have a shorthand and a long version use whichever you like. brreg_search_criteria , p360_search_criteria and duplicate_remove_payload cannot be given as a cli argument at the moment.","title":"Configuring"},{"location":"configuring/#settingsjson-file","text":"The settings.json file can actually store all arguments that are available in this program. However, I would advice against storing action and possibly --authkey in settings.json . action because action usually need to be different each time since we are doing everything in two steps. --authkey because we don't encrypt it, but you can if you want to. A basic settings.json file looks something like this { \"authkey\" : \"some authkey\" , \"p360_base_url\" : \"somep360url.com/api/\" , \"brreg_base_url\" : \"https://data.brreg.no/enhetsregisteret/api/\" , \"cached\" : false , \"dry\" : false , \"error_margin\" : 50 , \"brreg_search_criteria\" : { \"organisasjonsform\" : [ \"AS\" , \"ASA\" , \"ENK\" ], \"konkurs\" : false , \"fraAntallAnsatte\" : 1 , \"registrertIMvaregisteret\" : true , \"registrertIForetaksregisteret\" : true , \"naeringskode\" : \"A,C,D,E\" , \"size\" : 100 }, \"p360_search_criteria\" : { \"parameter\" : { \"Active\" : true , \"Page\" : 0 , \"MaxRows\" : 20 , \"SortCriterion\" : \"RecnoDescending\" , \"IncludeCustomFields\" : false } }, \"duplicate_remove_payload\" : { \"Recno\" : null , \"Active\" : false , \"EnterpriseNumber\" : \"\" } }","title":"Settings.json file"},{"location":"configuring/#environment-variables","text":"It might be usefull to set arguments with environment variables instead. You can do this by prepending the argument with P360_ and capitalize the argument. ie: error_margin -> P360_ERROR_MARGIN brreg_base_url -> P360_BRREG_BASE_URL p360_base_url -> P360_P360_BASE_URL","title":"Environment Variables"},{"location":"configuring/#commandline-arguments","text":"All commands have a shorthand and a long version use whichever you like. brreg_search_criteria , p360_search_criteria and duplicate_remove_payload cannot be given as a cli argument at the moment.","title":"Commandline Arguments"},{"location":"faq/","text":"","title":"FAQ"},{"location":"usage/","text":"The program runs in a two-step fashion were the first step creates a worklist . The worklist is then used as input for the second step which is a synchronize or update step. We chose this way of doing it since it gives some control back to the user before possibly long running updates starts. Note The examples assumes you have a basic settings.json file setup Installing \u00b6 pip install p360-contact-manager Configuring \u00b6 please see configuring Finding duplicates \u00b6 In Public 360 there can be created duplicates of enterprises. To find these run the program in this Create Worklist python p360-contact-manager --authkey the_key --p360_base_url url -o worklist.json duplicates Check the produced worklist json Use worklist to update p360 python p360-contact-manager --authkey the_key --p360_base_url url -w worklist.json -o result.json update Synchronize against Br\u00f8nn\u00f8ysund Registeret \u00b6 This takes some search criteria, and all matching entities, will be Synchronized with p360. This means that enterprises which exists will be updated. Enterprises which don't exist in p360 will be created. For this you need to supply a search criteria payload. The easiest way to do this is to add the following to settings.json in the same folder from which you run the program. { \"brreg_search_criteria\" : { \"organisasjonsform\" : [ \"ANS\" , \"AS\" , \"ASA\" , \"ENK\" ], \"konkurs\" : false , \"fraAntallAnsatte\" : 1 , \"registrertIMvaregisteret\" : true , \"registrertIForetaksregisteret\" : true , \"naeringskode\" : \"A,C,D,E,F,I,K,L,M,N,O,P,Q,R,S\" , \"size\" : 100 } } All available search criterias can be found at the brreg.no api page Create Worklist python p360-contact-manager --brreg_base_url https://data.brreg.no/enhetsregisteret/api/ -o worklist.json brreg_synchronize Check that the worklist.json looks okay Run Synchronize python p360-contact-manager --authkey the_key --p360_base_url url -w worklist.json -o result.json synchronize Caching \u00b6 You can cache all enterprises found in p360 into a json file which then later can be used as the source for when finding duplicates or checking malformed. This way you don't have to query p360 which can be very slow all the time. Run Cache python p360-contact-manager --authkey the_key --p360_base_url url cache Use cache with -c / --cached python p360-contact-manager --authkey the_key --p360_base_url url -o worklist.json --cached duplicates","title":"Usage"},{"location":"usage/#installing","text":"pip install p360-contact-manager","title":"Installing"},{"location":"usage/#configuring","text":"please see configuring","title":"Configuring"},{"location":"usage/#finding-duplicates","text":"In Public 360 there can be created duplicates of enterprises. To find these run the program in this Create Worklist python p360-contact-manager --authkey the_key --p360_base_url url -o worklist.json duplicates Check the produced worklist json Use worklist to update p360 python p360-contact-manager --authkey the_key --p360_base_url url -w worklist.json -o result.json update","title":"Finding duplicates"},{"location":"usage/#synchronize-against-brnnysund-registeret","text":"This takes some search criteria, and all matching entities, will be Synchronized with p360. This means that enterprises which exists will be updated. Enterprises which don't exist in p360 will be created. For this you need to supply a search criteria payload. The easiest way to do this is to add the following to settings.json in the same folder from which you run the program. { \"brreg_search_criteria\" : { \"organisasjonsform\" : [ \"ANS\" , \"AS\" , \"ASA\" , \"ENK\" ], \"konkurs\" : false , \"fraAntallAnsatte\" : 1 , \"registrertIMvaregisteret\" : true , \"registrertIForetaksregisteret\" : true , \"naeringskode\" : \"A,C,D,E,F,I,K,L,M,N,O,P,Q,R,S\" , \"size\" : 100 } } All available search criterias can be found at the brreg.no api page Create Worklist python p360-contact-manager --brreg_base_url https://data.brreg.no/enhetsregisteret/api/ -o worklist.json brreg_synchronize Check that the worklist.json looks okay Run Synchronize python p360-contact-manager --authkey the_key --p360_base_url url -w worklist.json -o result.json synchronize","title":"Synchronize against Br\u00f8nn\u00f8ysund Registeret"},{"location":"usage/#caching","text":"You can cache all enterprises found in p360 into a json file which then later can be used as the source for when finding duplicates or checking malformed. This way you don't have to query p360 which can be very slow all the time. Run Cache python p360-contact-manager --authkey the_key --p360_base_url url cache Use cache with -c / --cached python p360-contact-manager --authkey the_key --p360_base_url url -o worklist.json --cached duplicates","title":"Caching"},{"location":"contrib/contributing/","text":"How to contribute \u00b6 Have fun \u00b6 We are using dependencies library for dependency injection and returns library for functional programming. Please use this as an oportunity to have some fun with python. Missing functionality? \u00b6 Create an issue in the github branch. Or have a look at creating a new action and make a PR Submitting your code \u00b6 We use protected master branch, so the only way to push code is via pull-request To implement new issue, you need to create either bugfix/name-of-the-bug or feature/name-of-the-feature One of the commits should say Close #ISSUE_NUMBER, so pull-request will be associated with certain issue Branch should be rebased on top of latest master branch You can mark branch as [WIP] until it is finished and all checks are passed When all the above steps succeeded mention one of the mainters and ask for the review Other contribution \u00b6 If you find library useful or want to help us move forward, feel free to star and share the repo to your friends and colleagues. Share with us your experience, best practices and request new features, report bugs.","title":"Contribution"},{"location":"contrib/contributing/#how-to-contribute","text":"","title":"How to contribute"},{"location":"contrib/contributing/#have-fun","text":"We are using dependencies library for dependency injection and returns library for functional programming. Please use this as an oportunity to have some fun with python.","title":"Have fun"},{"location":"contrib/contributing/#missing-functionality","text":"Create an issue in the github branch. Or have a look at creating a new action and make a PR","title":"Missing functionality?"},{"location":"contrib/contributing/#submitting-your-code","text":"We use protected master branch, so the only way to push code is via pull-request To implement new issue, you need to create either bugfix/name-of-the-bug or feature/name-of-the-feature One of the commits should say Close #ISSUE_NUMBER, so pull-request will be associated with certain issue Branch should be rebased on top of latest master branch You can mark branch as [WIP] until it is finished and all checks are passed When all the above steps succeeded mention one of the mainters and ask for the review","title":"Submitting your code"},{"location":"contrib/contributing/#other-contribution","text":"If you find library useful or want to help us move forward, feel free to star and share the repo to your friends and colleagues. Share with us your experience, best practices and request new features, report bugs.","title":"Other contribution"}]}